#!/bin/bash

# GENERATED BY CLAUDE CODE, VALIDATED BY RYAN
# for mTLS

# Certificate generation script for mTLS
# This creates a Certificate Authority (CA), server certificates, and client certificates
# Run this script once to set up your certificates

set -e  # Exit on error

CERT_DIR="certs"
PASSWORD="serverpass"  # Change this in production!

echo "Creating certificate directory..."
mkdir -p $CERT_DIR
cd $CERT_DIR

# Clean up old certificates if they exist
rm -f *.jks *.pem *.crt *.key *.csr *.srl

echo "=== Step 1: Creating Certificate Authority (CA) ==="
# The CA is the trusted root that signs both server and client certificates
# In production, you'd use a real CA like Let's Encrypt or your company's CA

# Generate CA private key
openssl genrsa -out ca-key.pem 4096
echo "✓ CA private key created"

# Generate CA certificate (self-signed, valid for 10 years)
openssl req -new -x509 -days 3650 -key ca-key.pem -out ca-cert.pem \
    -subj "/C=US/ST=State/L=City/O=GroupH/OU=CA/CN=GroupH-CA"
echo "✓ CA certificate created"

echo ""
echo "=== Step 2: Creating Server Certificate ==="
# The server certificate identifies the server to clients

# Generate server private key
openssl genrsa -out server-key.pem 4096
echo "✓ Server private key created"

# Generate server certificate signing request (CSR)
openssl req -new -key server-key.pem -out server.csr \
    -subj "/C=US/ST=State/L=City/O=GroupH/OU=Server/CN=localhost"
echo "✓ Server CSR created"

# Sign server certificate with CA (valid for 2 years)
openssl x509 -req -days 730 -in server.csr -CA ca-cert.pem -CAkey ca-key.pem \
    -CAcreateserial -out server-cert.pem
echo "✓ Server certificate signed by CA"

echo ""
echo "=== Step 3: Creating Client Certificate ==="
# The client certificate identifies clients to the server

# Generate client private key
openssl genrsa -out client-key.pem 4096
echo "✓ Client private key created"

# Generate client certificate signing request
openssl req -new -key client-key.pem -out client.csr \
    -subj "/C=US/ST=State/L=City/O=GroupH/OU=Client/CN=test-client"
echo "✓ Client CSR created"

# Sign client certificate with CA (valid for 2 years)
openssl x509 -req -days 730 -in client.csr -CA ca-cert.pem -CAkey ca-key.pem \
    -CAcreateserial -out client-cert.pem
echo "✓ Client certificate signed by CA"

echo ""
echo "=== Step 4: Creating Java Keystores (JKS format) ==="
# Java uses JKS (Java KeyStore) format to store certificates

# Create server keystore (holds server's private key and certificate)
# PKCS12 is used as intermediate format
openssl pkcs12 -export -in server-cert.pem -inkey server-key.pem \
    -out server-keystore.p12 -name server -password pass:$PASSWORD

keytool -importkeystore -srckeystore server-keystore.p12 -srcstoretype PKCS12 \
    -destkeystore server-keystore.jks -deststoretype JKS \
    -srcstorepass $PASSWORD -deststorepass $PASSWORD -noprompt
echo "✓ Server keystore created (server-keystore.jks)"

# Create server truststore (holds trusted client certificates)
# Import the CA certificate so server trusts any certificate signed by this CA
keytool -import -file ca-cert.pem -alias ca -keystore server-truststore.jks \
    -storepass $PASSWORD -noprompt
echo "✓ Server truststore created (server-truststore.jks)"

# Create client keystore (holds client's private key and certificate)
openssl pkcs12 -export -in client-cert.pem -inkey client-key.pem \
    -out client-keystore.p12 -name client -password pass:$PASSWORD

keytool -importkeystore -srckeystore client-keystore.p12 -srcstoretype PKCS12 \
    -destkeystore client-keystore.jks -deststoretype JKS \
    -srcstorepass $PASSWORD -deststorepass $PASSWORD -noprompt
echo "✓ Client keystore created (client-keystore.jks)"

# Create client truststore (holds trusted server certificates)
# Import the CA certificate so client trusts any certificate signed by this CA
keytool -import -file ca-cert.pem -alias ca -keystore client-truststore.jks \
    -storepass $PASSWORD -noprompt
echo "✓ Client truststore created (client-truststore.jks)"

echo ""
echo "=== Certificate Generation Complete! ==="
echo ""
echo "Files created in '$CERT_DIR':"
echo "  Server files (keep these on server):"
echo "    - server-keystore.jks      (server's identity)"
echo "    - server-truststore.jks    (trusted clients)"
echo ""
echo "  Client files (distribute to clients):"
echo "    - client-keystore.jks      (client's identity)"
echo "    - client-truststore.jks    (trusted servers)"
echo ""
echo "  CA files (keep secure, needed to generate more certs):"
echo "    - ca-cert.pem"
echo "    - ca-key.pem"
echo ""
echo "⚠️  IMPORTANT: Add 'certs/' to your .gitignore!"
echo "⚠️  Never commit certificates to version control!"
echo ""
echo "For additional clients, run: ./generate-client-cert.sh <client-name>"
